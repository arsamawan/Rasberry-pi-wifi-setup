'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _memoize = require('lodash/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getBrowserEngine = null;

var BrowserEngine = function () {
  function BrowserEngine() {
    _classCallCheck(this, BrowserEngine);
  }

  _createClass(BrowserEngine, [{
    key: 'blink',
    get: function get() {
      return this.value === 'blink';
    }
  }, {
    key: 'edgehtml',
    get: function get() {
      return this.value === 'edgehtml';
    }
  }, {
    key: 'gecko',
    get: function get() {
      return this.value === 'gecko';
    }
  }, {
    key: 'info',
    get: function get() {
      return {
        blink: this.blink,
        edgehtml: this.edgehtml,
        gecko: this.gecko,
        trident: this.trident,
        webkit: this.webkit,
        value: this.value
      };
    }
  }, {
    key: 'trident',
    get: function get() {
      return this.value === 'trident';
    }
  }, {
    key: 'webkit',
    get: function get() {
      return this.value === 'webkit';
    }
  }, {
    key: 'value',
    get: function get() {
      if (!getBrowserEngine) {
        getBrowserEngine = (0, _memoize2.default)(require('./getBrowserEngine').default);
      }
      return getBrowserEngine();
    }
  }]);

  return BrowserEngine;
}();

exports.default = new BrowserEngine();