'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _memoize = require('lodash/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getOS = null;

var OS = function () {
  function OS() {
    _classCallCheck(this, OS);
  }

  _createClass(OS, [{
    key: 'aix',
    get: function get() {
      return this.value === 'aix';
    }
  }, {
    key: 'amigaos',
    get: function get() {
      return this.value === 'amigaos';
    }
  }, {
    key: 'android',
    get: function get() {
      return this.value === 'android';
    }
  }, {
    key: 'beos',
    get: function get() {
      return this.value === 'beos';
    }
  }, {
    key: 'bsd',
    get: function get() {
      return this.freebsd || this.openbsd;
    }
  }, {
    key: 'centos',
    get: function get() {
      return this.value === 'centos';
    }
  }, {
    key: 'darwin',
    get: function get() {
      return this.ios || this.mac;
    }
  }, {
    key: 'debian',
    get: function get() {
      return this.ubuntu || this.value === 'debian';
    }
  }, {
    key: 'fedora',
    get: function get() {
      return this.value === 'fedora';
    }
  }, {
    key: 'freebsd',
    get: function get() {
      return this.value === 'freebsd';
    }
  }, {
    key: 'info',
    get: function get() {
      return {
        aix: this.aix,
        amigaos: this.amigaos,
        android: this.android,
        beos: this.beos,
        bsd: this.bsd,
        centos: this.centos,
        darwin: this.darwin,
        debian: this.debian,
        fedora: this.fedora,
        freebsd: this.freebsd,
        ios: this.ios,
        linux: this.linux,
        mac: this.mac,
        nintendo: this.nintendo,
        openbsd: this.openbsd,
        osx: this.osx,
        redhat: this.redhat,
        rhel: this.rhel,
        slackware: this.slackware,
        starBlade: this.starBlade,
        sunos: this.sunos,
        ubuntu: this.ubuntu,
        unix: this.unix,
        value: this.value,
        win32: this.win32,
        win64: this.win64,
        win: this.win,
        windows: this.windows
      };
    }
  }, {
    key: 'ios',
    get: function get() {
      return this.value === 'ios';
    }
  }, {
    key: 'linux',
    get: function get() {
      if (this.rhel) return true;
      if (this.debian) return true;
      switch (this.value) {
        case 'linux':
          return true;
        case 'android':
          return true;
        case 'slackware':
          return true;
      }
      return false;
    }
  }, {
    key: 'mac',
    get: function get() {
      return this.value === 'mac';
    }
  }, {
    key: 'nintendo',
    get: function get() {
      return this.value === 'nintendo' || this.wii;
    }
  }, {
    key: 'openbsd',
    get: function get() {
      return this.value === 'openbsd';
    }
  }, {
    key: 'osx',
    get: function get() {
      return this.mac;
    }
  }, {
    key: 'redhat',
    get: function get() {
      return this.value === 'redhat';
    }
  }, {
    key: 'rhel',
    get: function get() {
      return this.redhat || this.centos || this.fedora;
    }
  }, {
    key: 'slackware',
    get: function get() {
      return this.value === 'slackware';
    }
  }, {
    key: 'starBlade',
    get: function get() {
      return this.value === 'star-blade';
    }
  }, {
    key: 'sunos',
    get: function get() {
      return this.value === 'sunos';
    }
  }, {
    key: 'ubuntu',
    get: function get() {
      return this.value === 'ubuntu';
    }
  }, {
    key: 'unix',
    get: function get() {
      if (this.linux) return true;
      if (this.darwin) return true;
      if (this.bsd) return true;
      switch (this.value) {
        case 'ais':
          return true;
        case 'sunos':
          return true;
      }
      return false;
    }
  }, {
    key: 'value',
    get: function get() {
      if (!getOS) getOS = (0, _memoize2.default)(require('./getOS').default);
      return getOS();
    }
  }, {
    key: 'wii',
    get: function get() {
      return this.value === 'wii';
    }
  }, {
    key: 'win32',
    get: function get() {
      return this.value === 'win32';
    }
  }, {
    key: 'win64',
    get: function get() {
      return this.value === 'win64';
    }
  }, {
    key: 'win',
    get: function get() {
      return this.win32 || this.win64;
    }
  }, {
    key: 'windows',
    get: function get() {
      return this.win;
    }
  }]);

  return OS;
}();

exports.default = new OS();