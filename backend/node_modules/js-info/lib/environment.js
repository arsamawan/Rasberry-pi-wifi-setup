'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _memoize = require('lodash/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getEnvironment = null;

var Environment = function () {
  function Environment() {
    _classCallCheck(this, Environment);

    this.default = 'development';
  }

  _createClass(Environment, [{
    key: 'dev',
    get: function get() {
      return this.development;
    }
  }, {
    key: 'development',
    get: function get() {
      return this.value === 'development';
    }
  }, {
    key: 'info',
    get: function get() {
      return {
        dev: this.dev,
        development: this.development,
        prod: this.prod,
        production: this.production,
        stage: this.stage,
        staging: this.staging,
        test: this.test,
        testing: this.testing,
        value: this.value
      };
    }
  }, {
    key: 'prod',
    get: function get() {
      return this.production;
    }
  }, {
    key: 'production',
    get: function get() {
      return this.value === 'production';
    }
  }, {
    key: 'stage',
    get: function get() {
      return this.staging;
    }
  }, {
    key: 'staging',
    get: function get() {
      return this.value === 'staging';
    }
  }, {
    key: 'test',
    get: function get() {
      return this.testing;
    }
  }, {
    key: 'testing',
    get: function get() {
      return this.value === 'testing';
    }
  }, {
    key: 'value',
    get: function get() {
      if (!getEnvironment) {
        getEnvironment = (0, _memoize2.default)(require('./getEnvironment').default);
      }
      return getEnvironment(this.default);
    }
  }]);

  return Environment;
}();

exports.default = new Environment();